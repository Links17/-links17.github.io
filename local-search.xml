<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>esp32-idf</title>
    <link href="/2024/03/15/esp32-idf/"/>
    <url>/2024/03/15/esp32-idf/</url>
    
    <content type="html"><![CDATA[<h3 id="ESP-IDF"><a href="#ESP-IDF" class="headerlink" title="ESP-IDF"></a>ESP-IDF</h3><p><a href="https://docs.espressif.com/projects/esp-idf/en/v4.4.2/esp32/get-started/macos-setup.html">Standard Setup of Toolchain for Mac OS - ESP32 - — ESP-IDF Programming Guide v4.4.2 documentation</a><br><img src="/esp1.png" alt="esp32"></p><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍:"></a>介绍:</h3><p>ESP-IDF 是乐鑫为 ESP32 提供的物联网开发框架。</p><ul><li>ESP-IDF 包含一系列库及头文件，提供了基于 ESP32 构建软件项目所需的核心组件。</li><li>ESP-IDF 还提供了开发和量产过程中最常用的工具及功能，例如：构建、烧录、调试和测量等。</li></ul><h3 id="架构"><a href="#架构" class="headerlink" title="架构"></a>架构</h3><p>基于组件的架构<br><img src="/esp2.png" alt="esp32"></p><p>应用程序的架构<br><img src="/esp3.png" alt="esp32"></p><h3 id="Clion配置"><a href="#Clion配置" class="headerlink" title="Clion配置"></a>Clion配置</h3><p><img src="/esp4.png" alt="esp32"><br><img src="/esp5.png" alt="esp32"></p><h2 id="ESP-Jumpstart"><a href="#ESP-Jumpstart" class="headerlink" title="ESP-Jumpstart"></a>ESP-Jumpstart</h2><p>ESP-Jumpstart 库包含了一系列由 ESP-IDF 构建的<em>应用程序</em></p><h3 id="1-hello-world"><a href="#1-hello-world" class="headerlink" title="1.hello world"></a>1.hello world</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;freertos/FreeRTOS.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;freertos/task.h&quot;</span></span><br><br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">app_main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;[%d] Hello world!\n&quot;</span>, i);<br>        i++;<br>        <span class="hljs-built_in">vTaskDelay</span>(<span class="hljs-number">5000</span> / portTICK_PERIOD_MS);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/esp6.png" alt="esp32"><br>app_main() 函数是应用程序入口点，所有应用程序都从这里开始执行。FreeRTOS 内核在 ESP32 双核上运行之后将调用此函数，FreeRTOS<br>一旦完成初始化，即将在 ESP32 的其中一个核上新建一个应用程序线程，称为主线程，并在这一线程中调用 app_main() 函数。应用程序线程的堆栈可以通过<br>SDK 的配置信息进行配置。</p><p>FreeRTOS 是驱动 ESP32 双核的操作系统。<a href="https://www.freertos.org/">FreeRTOS</a><br>是一个很小的内核，提供了任务创建、任务间通信（信号量、信息队列、互斥量）、中断和定时器等机制。在上面示例中，我们使用 vTaskDelay<br>函数让线程休眠 5 秒</p>]]></content>
    
    
    <categories>
      
      <category>ENV</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ESP32</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
