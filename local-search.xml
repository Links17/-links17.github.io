<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>yocto-start</title>
    <link href="/2024/04/08/yocto-start/"/>
    <url>/2024/04/08/yocto-start/</url>
    
    <content type="html"><![CDATA[<h1 id="Yocto-系统构建实践"><a href="#Yocto-系统构建实践" class="headerlink" title="Yocto 系统构建实践"></a>Yocto 系统构建实践</h1><p>如何基于Yocto 构建一个Linux系统</p><h2 id="前菜"><a href="#前菜" class="headerlink" title="前菜"></a>前菜</h2><p>一台机器插上电后,会发生什么?</p><img src="/2024/04/08/yocto-start/Untitled.png" class="" title="Untitled"><h2 id="解释"><a href="#解释" class="headerlink" title="解释"></a>解释</h2><p>第 1 步 - 当我们打开电源时，BIOS（基本输入&#x2F;输出系统）或 UEFI（统一可扩展固件接口）固件会从非易失性内存中加载，并执行<br>POST（开机自检）。</p><p>第 2 步 - BIOS&#x2F;UEFI 检测连接到系统的设备，包括 CPU、内存和存储设备。</p><p>第 3 步 - 选择一个启动设备来启动操作系统。可以是硬盘、网络服务器或 CD ROM。</p><p>第 4 步 - BIOS&#x2F;UEFI 运行引导加载器 (GRUB)，它提供了一个选择操作系统或内核功能的菜单。</p><p>第 5 步 - 内核准备就绪后，我们现在切换到用户空间。内核启动 systemd 作为第一个用户空间进程，负责管理进程和服务、探测所有剩余硬件、挂载文件系统并运行桌面环境。</p><p>第 6 步 - 系统启动时，systemd 默认激活默认目标单元。同时还会执行其他分析单元。</p><p>第 7 步 - 系统运行一组启动脚本并配置环境。</p><p>第 8 步 - 用户将看到一个登录窗口。系统现已准备就绪。</p><h2 id="所以如果要做一个系统需要考虑的大方向是"><a href="#所以如果要做一个系统需要考虑的大方向是" class="headerlink" title="所以如果要做一个系统需要考虑的大方向是"></a>所以如果要做一个系统需要考虑的大方向是</h2><ol><li><strong>硬件兼容性和初始化</strong>: 系统需要确保硬件与 BIOS&#x2F;UEFI 兼容，并且能够通过 POST 检测。此外，需要对连接的设备（如<br>CPU、内存、存储设备）进行检测和识别。</li><li><strong>启动设备选择</strong>: 系统设计要考虑到支持不同类型的启动设备，例如硬盘、网络服务器或 CD ROM，并确保 BIOS&#x2F;UEFI<br>能够正确地识别和引导这些设备。</li><li><strong>引导加载器配置</strong>: 需要考虑在系统中配置适当的引导加载器（比如 GRUB），以便用户可以选择操作系统或内核功能。</li><li><strong>内核准备就绪</strong>: 在内核启动后，需要确保切换到用户空间并启动 systemd 或其他进程管理器，以便管理进程和服务，挂载文件系统以及运行所需的桌面环境。</li><li><strong>目标单元和启动脚本配置</strong>: 确保系统默认激活合适的目标单元，并执行必要的启动脚本以配置环境。</li></ol><h3 id="着重说一下Bootloader"><a href="#着重说一下Bootloader" class="headerlink" title="着重说一下Bootloader"></a>着重说一下<strong>Bootloader</strong></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs bash">U-boot<br>适用于大多数受支持的 ARM 设备类型<br>BalenaOS 仅支持块设备，不支持 RAW 闪存设备。<br>通用功能在 u-boot 环境中实现，该环境由通用操作系统 Yocto 层提供。<br>u-boot环境嵌入在u-boot二进制文件中。<br>这样，预期配置就能与相匹配的 BalenaOS 版本一起使用，并避免受到任何预编程环境的干扰。<br>设备特定功能由设备存储库提供，可通过 u-boot 脚本或电路板配置文件定义的环境实现<br>特定的 Jetson 模块（TX2、Nano）使用额外的 extlinux.conf 文件，该文件由 u-boot 加载和解析<br>u-boot从BalenaOS启动分区存储并加载三个环境文件：<br>resinOS_uEnv.txt用于存储活动根分区索引，extra_uEnv.txt存储特定设备的配置元素，如<br>可选内核命令行参数以及任何自定义选择的设备树，<br>而bootcount.env存储操作系统更新期间尝试启动重试失败的次数。<br>注意：仅在特定设备上支持自定义设备树选择<br>在 Beaglebone 设备上应用 uEnv.txt_internal/uEnv.txt 中指定的内核设备树覆盖层<br><br>Grub<br>用于支持的 x86 设备类型<br>通用功能由操作系统层在 grub 配置模板中实现<br><br>Cboot<br>在运行 L4T 32.X 的 Jetson Xavier 设备上使用<br>从特定设备的 A/B 分区加载设备树<br>与其他引导加载程序不同，它不支持 FAT 文件系统<br>当前活动根文件系统标签由内核设备树提供的内核命令行定义。启动时根据活动设备树选择活动 rootfs<br>UEFI L4Tlauncher<br>用于 Jetson Orin 平台<br>从 extlinux.conf 文件获取内核映像路径和内核 cmdline 参数<br>回滚和活动根文件系统选择由 balena-jetson-orin 设备库提供的引导加载程序补丁实现<br>通过从 resinOS_uEnv.txt、extra_uEnv.txt 和 bootcount.env <br>文件中存储和读取环境变量，在 u-boot 中采用与 balenaOS 相同的回滚机制。<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs bash"><br>bootcmd_dtb=fatload <span class="hljs-variable">$&#123;devtype&#125;</span> <span class="hljs-variable">$&#123;devnum&#125;</span>:1 <span class="hljs-variable">$&#123;fdt_addr_r&#125;</span> /<span class="hljs-variable">$&#123;fdtfile&#125;</span><br><br>这个命令用于从 FAT 文件系统加载设备树文件（Device Tree Blob）到指定的内存地址。<br>bootcmd_otenv=ext4load <span class="hljs-variable">$&#123;devtype&#125;</span> <span class="hljs-variable">$&#123;devnum&#125;</span>:2 <span class="hljs-variable">$&#123;loadaddr&#125;</span> /boot/loader/uEnv.txt; <span class="hljs-built_in">env</span> import -t <span class="hljs-variable">$&#123;loadaddr&#125;</span> <span class="hljs-variable">$&#123;filesize&#125;</span><br><br>这个命令用于从 ext4 文件系统加载 uEnv.txt 配置文件，并将其导入到 U-Boot 的环境变量中。<br>bootcmd_load_k=ext4load <span class="hljs-variable">$&#123;devtype&#125;</span> <span class="hljs-variable">$&#123;devnum&#125;</span>:2 <span class="hljs-variable">$&#123;kernel_addr_r&#125;</span> <span class="hljs-string">&quot;/boot&quot;</span><span class="hljs-variable">$&#123;kernel_image&#125;</span><br><br>这个命令用于从 ext4 文件系统加载内核镜像到指定的内存地址。<br>bootcmd_load_r=ext4load <span class="hljs-variable">$&#123;devtype&#125;</span> <span class="hljs-variable">$&#123;devnum&#125;</span>:2 <span class="hljs-variable">$&#123;ramdisk_addr_r&#125;</span> <span class="hljs-string">&quot;/boot&quot;</span><span class="hljs-variable">$&#123;ramdisk_image&#125;</span>; setenv ramdisk_size <span class="hljs-variable">$&#123;filesize&#125;</span><br><br>这个命令用于从 ext4 文件系统加载 RAM disk 镜像到指定的内存地址，并设置相应的大小。<br>bootcmd_run=@@KERNEL_BOOTCMD@@ <span class="hljs-variable">$&#123;kernel_addr_r&#125;</span> <span class="hljs-variable">$&#123;ramdisk_addr_r&#125;</span>:<span class="hljs-variable">$&#123;ramdisk_size&#125;</span> <span class="hljs-variable">$&#123;fdt_addr_r&#125;</span><br><br>这个命令运行由 @@KERNEL_BOOTCMD@@ 定义的内核启动命令，传递了内核地址、RAM disk 地址和大小以及设备树地址。<br>最后, bootcmd=run bootcmd_dtb; run bootcmd_otenv; run bootcmd_load_k; run bootcmd_load_r; run bootcmd_run<br><br></code></pre></td></tr></table></figure><h2 id="简单介绍Yocto"><a href="#简单介绍Yocto" class="headerlink" title="简单介绍Yocto"></a>简单介绍Yocto</h2><p><a href="https://www.yoctoproject.org/">Yocto项目</a>本质是一个构建工具，其帮助开发者能够快速地、简单地设计一个基于Linux的系统</p><p><a href="https://www.yoctoproject.org/">Yocto项目</a>本质是一个构建工具，其帮助开发者能够快速地、简单地设计一个基于Linux的系统</p><p>OpenEmbedded项目维护了一个构建工具BitBake和一个元数据层（详细描述了构建一个Linux发行版所需要的包及构建过程）</p><p>Poky Linux是OpenEmbedded项目的一个扩展应用，同时也是Yocto项目的前身</p><h2 id="为什么要用Yocto"><a href="#为什么要用Yocto" class="headerlink" title="为什么要用Yocto?"></a>为什么要用Yocto?</h2><ol><li><strong>定制化能力</strong>：Yocto 允许开发人员根据特定的嵌入式系统需求创建定制的 Linux 发行版。这意味着可以精确控制软件包、内核配置、文件系统布局等，以满足特定设备的需求。</li><li><strong>跨架构支持</strong>：Yocto 提供了对多种处理器架构的支持，从 ARM 到 x86 等。这使得可以使用相同的工具链和方法在不同的硬件平台上构建嵌入式系统。</li><li><strong>自动化构建</strong>：Yocto 提供了一套完整的自动化构建系统，可以根据配置文件自动构建适用于目标设备的 Linux<br>发行版。这简化了构建过程，减少了手动干预的需求。</li><li><strong>维护性</strong>：通过使用 Yocto 平台，可以更轻松地管理嵌入式系统的软件组件，更新内核，添加新功能等。这有助于提高系统的可维护性和灵活性。</li></ol><h2 id="为什么能交叉编译"><a href="#为什么能交叉编译" class="headerlink" title="为什么能交叉编译?"></a>为什么能交叉编译?</h2><ol><li><strong>目标设备与主机分离</strong>：Yocto 采用了清晰的目标设备和主机之间的分离。通过使用交叉编译，Yocto<br>可以在主机上构建适用于特定目标设备的二进制文件和库，而无需将编译环境直接部署到目标设备上。</li><li><strong>构建环境隔离</strong>：Yocto 的构建系统能够处理不同架构之间的依赖关系，并提供了环境隔离，使得可以在不同的架构之间进行交叉编译。</li><li><strong>工具链支持</strong>：Yocto 提供了针对不同目标体系结构的交叉编译工具链，以确保生成的代码能够在目标设备上正确运行。</li></ol><h2 id="编译过程"><a href="#编译过程" class="headerlink" title="编译过程"></a>编译过程</h2><h2 id="更为详细的构建-包含软件包"><a href="#更为详细的构建-包含软件包" class="headerlink" title="更为详细的构建(包含软件包)"></a>更为详细的构建(包含软件包)</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 设置 Docker Compose 项目的主页</span><br>HOMEPAGE = <span class="hljs-string">&quot;https://github.com/docker/compose&quot;</span><br><br><span class="hljs-comment"># Docker Compose 项目的简要摘要</span><br>SUMMARY = <span class="hljs-string">&quot;使用 Docker 定义和运行多容器应用程序&quot;</span><br><br><span class="hljs-comment"># Docker Compose 项目的描述</span><br>DESCRIPTION = <span class="hljs-string">&quot;Docker Compose 是一个用于在 Docker 上运行使用 Compose 文件格式定义的多容器应用程序的工具。&quot;</span><br><br><span class="hljs-comment"># 将部分定义为 &quot;devel&quot;，用于 Docker Compose 项目</span><br>SECTION = <span class="hljs-string">&quot;devel&quot;</span><br><br><span class="hljs-comment"># 为 Docker Compose 项目设置许可证</span><br>LICENSE = <span class="hljs-string">&quot;Apache-2.0&quot;</span><br><br><span class="hljs-comment"># 许可证文件的校验和</span><br>LIC_FILES_CHKSUM = <span class="hljs-string">&quot;file://src/<span class="hljs-variable">$&#123;GO_IMPORT&#125;</span>/LICENSE;md5=175792518e4ac015ab6696d16c4f607e&quot;</span><br><br><span class="hljs-comment"># 定义用于获取代码的来源 URI</span><br>SRC_URI = <span class="hljs-string">&quot;\</span><br><span class="hljs-string">    git://github.com/docker/compose.git;branch=main;protocol=https;name=compose \</span><br><span class="hljs-string">    git://github.com/docker/cli.git;branch=24.0;protocol=https;name=cli;destsuffix=<span class="hljs-variable">$&#123;S&#125;</span>/src/github.com/docker/cli \</span><br><span class="hljs-string">    &quot;</span><br><br><span class="hljs-comment"># 指定 Docker Compose 和 Docker CLI 的源代码版本</span><br>SRCREV_compose = <span class="hljs-string">&quot;8318f66330358988a058bf611a953f464ab7973f&quot;</span><br>SRCREV_cli = <span class="hljs-string">&quot;3713ee1eea0447bcfe27378ad247c7e245406f04&quot;</span><br>SRCREV_FORMAT = <span class="hljs-string">&quot;compose_cli&quot;</span><br><br><span class="hljs-comment"># 启用检查上游提交</span><br>UPSTREAM_CHECK_COMMITS = <span class="hljs-string">&quot;1&quot;</span><br><br><span class="hljs-comment"># 为 Docker Compose 定义 Go 导入</span><br>GO_IMPORT = <span class="hljs-string">&quot;github.com/docker/compose/v2&quot;</span><br><br><span class="hljs-comment"># 继承 go-mod 类以管理 Go 模块</span><br>inherit go-mod<br><br><span class="hljs-comment"># 为 Go 设置额外的 LDFLAGS</span><br>GO_EXTRA_LDFLAGS = <span class="hljs-string">&quot;-w -X <span class="hljs-variable">$&#123;GO_IMPORT&#125;</span>/internal.Version=<span class="hljs-variable">$&#123;PV&#125;</span>&quot;</span><br><br><span class="hljs-comment"># 编译 Go 源码</span><br><span class="hljs-function"><span class="hljs-title">go_do_compile</span></span>() &#123;<br>    <span class="hljs-built_in">export</span> TMPDIR=<span class="hljs-string">&quot;<span class="hljs-variable">$&#123;GOTMPDIR&#125;</span>&quot;</span><br>    <span class="hljs-built_in">mkdir</span> -p <span class="hljs-variable">$&#123;B&#125;</span>/cli-plugins/bin<br>    <span class="hljs-variable">$&#123;GO&#125;</span> mod download -modcacherw<br>    <span class="hljs-built_in">cp</span> -f <span class="hljs-variable">$&#123;S&#125;</span>/src/github.com/docker/cli/cli/config/config.go <span class="hljs-variable">$&#123;B&#125;</span>/pkg/mod/github.com/docker/cli@v24.0.4+incompatible/cli/config/config.go<br>    <span class="hljs-comment"># 删除预构建的二进制文件以避免 QA 问题</span><br>    <span class="hljs-built_in">rm</span> -f <span class="hljs-variable">$&#123;B&#125;</span>/pkg/mod/github.com/laurazard/godog*/bin/staticcheck*<br>    <span class="hljs-built_in">rm</span> -f <span class="hljs-variable">$&#123;B&#125;</span>/pkg/mod/github.com/in-toto/in-toto-golang*/test/data/helloworld<br>    <span class="hljs-variable">$&#123;GO&#125;</span> build <span class="hljs-variable">$&#123;GOBUILDFLAGS&#125;</span> -o <span class="hljs-variable">$&#123;B&#125;</span>/cli-plugins/bin/docker-compose ./cmd<br>&#125;<br><br><span class="hljs-comment"># 追加 Go 的安装步骤</span><br>go_do_install:<span class="hljs-function"><span class="hljs-title">append</span></span>() &#123;<br>    install -d <span class="hljs-variable">$&#123;D&#125;</span><span class="hljs-variable">$&#123;libdir&#125;</span>/docker/cli-plugins<br>    install -m 755 <span class="hljs-variable">$&#123;B&#125;</span>/cli-plugins/bin/docker-compose <span class="hljs-variable">$&#123;D&#125;</span><span class="hljs-variable">$&#123;libdir&#125;</span>/docker/cli-plugins<br>&#125;<br><br><span class="hljs-comment"># 为 Docker Compose 包定义文件</span><br>FILES:<span class="hljs-variable">$&#123;PN&#125;</span> += <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;libdir&#125;</span>/docker/cli-plugins&quot;</span><br><br><span class="hljs-comment"># 为 Docker Compose 定义运行时依赖项</span><br>RDEPENDS:<span class="hljs-variable">$&#123;PN&#125;</span> += <span class="hljs-string">&quot;docker&quot;</span><br></code></pre></td></tr></table></figure><h2 id="Seeed中的Yocto-实践"><a href="#Seeed中的Yocto-实践" class="headerlink" title="Seeed中的Yocto 实践"></a>Seeed中的Yocto 实践</h2><ol><li>Balena(m1)</li></ol><p><a href="https://github.com/balena-os/meta-balena">https://github.com/balena-os/meta-balena</a></p><ol><li>reterminal</li></ol><p><a href="https://wiki.seeedstudio.com/reTerminal-Yocto/">Yocto for reTerminal | Seeed Studio Wiki</a></p><ol><li>m1-pro(未生产)</li></ol><h2 id="有什么更新方式"><a href="#有什么更新方式" class="headerlink" title="有什么更新方式?"></a>有什么更新方式?</h2><p><a href="https://wiki.yoctoproject.org/wiki/System_Update">System Update - Yocto Project</a></p><h2 id="有什么限制"><a href="#有什么限制" class="headerlink" title="有什么限制?"></a>有什么限制?</h2><ol><li><strong>硬件支持</strong>：Yocto Project 支持广泛的处理器架构和设备，但在选择硬件时需要确保 Yocto 有对该硬件的支持。</li><li><strong>学习曲线</strong>：Yocto Project 并不是一项即插即用的解决方案，初学者可能需要花费一些时间来学习其工作原理、组件和工作流程。</li><li><strong>资源消耗</strong>：构建完整的 Yocto Linux 发行版需要相当大的计算资源和存储空间，特别是第一次构建时。</li><li><strong>维护和定制</strong>：对于新手来说，维护和定制 Yocto 构建可能需要一些时间和精力，特别是在面对定制内核、添加新软件包或调整系统配置时。</li></ol><h2 id="通过meta-raspberry-大概讲解下"><a href="#通过meta-raspberry-大概讲解下" class="headerlink" title="通过meta-raspberry 大概讲解下"></a>通过meta-raspberry 大概讲解下</h2><h2 id="yocto-hello-world-raspberry4"><a href="#yocto-hello-world-raspberry4" class="headerlink" title="yocto hello world(raspberry4)"></a>yocto hello world(raspberry4)</h2><ol><li>下载机器对应的meta-xxx</li><li>下载poky</li><li>初始化一个工作空间</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">ssh ubuntu@192.168.200.3<br><span class="hljs-built_in">cd</span>  /home/ubuntu/rpi<br><span class="hljs-built_in">source</span> ./layers/poky/oe-init-build-env rpi-build<br></code></pre></td></tr></table></figure><ol><li>添加layer</li><li>设置想要编译的机器型号</li><li>开始编译</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">bitbake core-image-base<br></code></pre></td></tr></table></figure><h2 id="Q-A"><a href="#Q-A" class="headerlink" title="Q&amp;A"></a>Q&amp;A</h2><p>yocto 中新增了bb文件需要重新编译整个系统吗</p><p>在 Yocto 中，如果你新增了一个 .bb 文件，通常情况下不需要重新编译整个系统。Yocto 使用 BitBake<br>构建系统，它会根据依赖和目标进行增量构建，这意味着只有受影响的部分才会被重新构建。</p><p>当你新增了一个 .bb 文件时，BitBake 会检测到这一变化，并尝试解析新的 .bb 文件以获取新的元数据。如果这个新的 .bb<br>文件引入了新的软件包或修改了现有软件包的依赖关系，BitBake 将会相应地更新构建过程，重新构建受影响的软件包及其依赖项。</p><p>然而，需要注意的是，在某些情况下，特别是当新的 .bb 文件引入了较大的变化或对核心组件有影响时，可能会导致更广泛的重建。但总体来说，Yocto<br>在处理新增 .bb 文件的情况下，会尽量采用增量构建，以最小化不必要的重复工作。</p><p>因此，一般情况下，新增 .bb 文件并不会导致整个系统的重新编译。</p><p>yocto apt 可以用吗</p><p>Yocto通常不直接使用APT（Advanced Package Tool）作为软件包管理工具，因为它采用自己的构建系统和包管理体系。在Yocto中，BitBake是主要的构建工具，而OpenEmbedded<br>Core提供了一套专门用于嵌入式系统的包管理器。</p><p>虽然Yocto不直接使用APT，但你可以通过meta-debian层将Debian软件包集成到Yocto构建中。这样做将使得你能够在Yocto生成的根文件系统中使用apt-get来安装和管理软件包。</p><p>总的来说，尽管Yocto本身不使用APT，但你可以利用相关的Layer将Debian软件包集成到Yocto构建中，从而实现类似于APT的软件包管理功能。</p><p>恢复出厂设置</p><p>依照选择的更新方式可以选择不同的恢复出厂设置,比如说ostree的话,就是会滚到</p>]]></content>
    
    
    <categories>
      
      <category>Yocto</category>
      
    </categories>
    
    
    <tags>
      
      <tag>OS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>wasm-llava</title>
    <link href="/2024/03/18/wasm-llava/"/>
    <url>/2024/03/18/wasm-llava/</url>
    
    <content type="html"><![CDATA[<h1 id="Wasm-大模型实践-以LlAVA为例"><a href="#Wasm-大模型实践-以LlAVA为例" class="headerlink" title="Wasm 大模型实践(以LlAVA为例)"></a>Wasm 大模型实践(以LlAVA为例)</h1><h2 id="一-概述"><a href="#一-概述" class="headerlink" title="一.概述"></a>一.概述</h2><p>解决繁琐的部署步骤,以及高性能的推理实践,并且达到实现跨平台</p><h2 id="二-步骤"><a href="#二-步骤" class="headerlink" title="二.步骤"></a>二.步骤</h2><p>1.安装wasmedge</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">curl -sSf https://raw.githubusercontent.com/WasmEdge/WasmEdge/master/utils/install.sh | bash -s -- --plugin wasi_nn-ggml<br></code></pre></td></tr></table></figure><p>2.模型下载</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">curl -LO https://huggingface.co/mys/ggml_llava-v1.5-7b/resolve/main/ggml-model-q5_k.gguf<br>curl -LO https://huggingface.co/mys/ggml_llava-v1.5-7b/resolve/main/mmproj-model-f16.gguf<br><br></code></pre></td></tr></table></figure><p>3.测试图片下载</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">curl -LO https://llava-vl.github.io/static/images/monalisa.jpg<br><br></code></pre></td></tr></table></figure><ol start="4"><li>启动</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">wasmedge --<span class="hljs-built_in">dir</span> .:. \<br>--<span class="hljs-built_in">env</span> mmproj=mmproj-model-f16.gguf \<br>--<span class="hljs-built_in">env</span> image=monalisa.jpg \<br>--nn-preload default:GGML:AUTO:ggml-model-q5_k.gguf \<br>wasmedge-ggml-llava.wasm default<br><br></code></pre></td></tr></table></figure><p>5.使用</p><img src="/2024/03/18/wasm-llava/img.png" class="" title="img.png">]]></content>
    
    
    <categories>
      
      <category>LlAVA</category>
      
    </categories>
    
    
    <tags>
      
      <tag>AI</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>esp32-idf</title>
    <link href="/2024/03/15/esp32-idf/"/>
    <url>/2024/03/15/esp32-idf/</url>
    
    <content type="html"><![CDATA[<h3 id="ESP-IDF"><a href="#ESP-IDF" class="headerlink" title="ESP-IDF"></a>ESP-IDF</h3><p><a href="https://docs.espressif.com/projects/esp-idf/en/v4.4.2/esp32/get-started/macos-setup.html">Standard Setup of Toolchain for Mac OS - ESP32 - — ESP-IDF Programming Guide v4.4.2 documentation</a></p><img src="/2024/03/15/esp32-idf/esp1.png" class="" title="esp32"><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍:"></a>介绍:</h3><p>ESP-IDF 是乐鑫为 ESP32 提供的物联网开发框架。</p><ul><li>ESP-IDF 包含一系列库及头文件，提供了基于 ESP32 构建软件项目所需的核心组件。</li><li>ESP-IDF 还提供了开发和量产过程中最常用的工具及功能，例如：构建、烧录、调试和测量等。</li></ul><h3 id="架构"><a href="#架构" class="headerlink" title="架构"></a>架构</h3><p>基于组件的架构</p><img src="/2024/03/15/esp32-idf/esp2.png" class="" title="esp32"><p>应用程序的架构</p><img src="/2024/03/15/esp32-idf/esp3.png" class="" title="esp32"><h3 id="Clion配置"><a href="#Clion配置" class="headerlink" title="Clion配置"></a>Clion配置</h3><img src="/2024/03/15/esp32-idf/esp4.png" class="" title="esp32"><img src="/2024/03/15/esp32-idf/esp5.png" class="" title="esp32"><h2 id="ESP-Jumpstart"><a href="#ESP-Jumpstart" class="headerlink" title="ESP-Jumpstart"></a>ESP-Jumpstart</h2><p>ESP-Jumpstart 库包含了一系列由 ESP-IDF 构建的<em>应用程序</em></p><h3 id="1-hello-world"><a href="#1-hello-world" class="headerlink" title="1.hello world"></a>1.hello world</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;freertos/FreeRTOS.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;freertos/task.h&quot;</span></span><br><br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">app_main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;[%d] Hello world!\n&quot;</span>, i);<br>        i++;<br>        <span class="hljs-built_in">vTaskDelay</span>(<span class="hljs-number">5000</span> / portTICK_PERIOD_MS);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><img src="/2024/03/15/esp32-idf/esp6.png" class="" title="esp32"><p>app_main() 函数是应用程序入口点，所有应用程序都从这里开始执行。FreeRTOS 内核在 ESP32 双核上运行之后将调用此函数，FreeRTOS<br>一旦完成初始化，即将在 ESP32 的其中一个核上新建一个应用程序线程，称为主线程，并在这一线程中调用 app_main() 函数。应用程序线程的堆栈可以通过<br>SDK 的配置信息进行配置。</p><p>FreeRTOS 是驱动 ESP32 双核的操作系统。<a href="https://www.freertos.org/">FreeRTOS</a><br>是一个很小的内核，提供了任务创建、任务间通信（信号量、信息队列、互斥量）、中断和定时器等机制。在上面示例中，我们使用 vTaskDelay<br>函数让线程休眠 5 秒</p>]]></content>
    
    
    <categories>
      
      <category>ENV</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ESP32</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
